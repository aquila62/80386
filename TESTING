Test a Linear Feedback Shift Register by running lfsr15.
This program cycles through a 15-bit LFSR.  The period length
is printed at the end.  Output bits are not printed.

Usage:

lfsr15

---------------------------------------------------------------

Test the Sieve of Eratosthenes by running sv.  Prime numbers
are generated up to 33554393.  Only primes from 33546251
to 33554393 are printed, to save space.  The tally is
printed to stderr.

Total primes computed in this program up to 33554393
is 2063689.  Roughly every 16th number is prime.

Usage:

sv

---------------------------------------------------------------

Solve the Tower of Hanoi puzzle by running twr.  A recursive
algorithm is used.  See the Wikipedia article on the Tower of
Hanoi for information on the algorithm.

Usage:

twr #disks

Where #disks is 2 to 9.

The program prints the state of the three towers after each move.

---------------------------------------------------------------

Solve the unbounded knapsack puzzle by running knap.

Usage:

knap

The program prints the state of each maximum reached.
There are four maximum solutions to this puzzle.
All four solutions are correct.

The example for this program was taken from Rosetta Code at

http://www.rosettacode.org.

---------------------------------------------------------------

Solve the knapsack 0/1 puzzle by running knap01.

Usage:

knap01

The solution for this puzzle uses a recursive routine
to maximize the value.

This program reads an input file, called knap01.rc.

Each line in knap01.rc contains three tokens:

header, weight, value

In this puzzle, the header identifies the name of an
ingredient in the knapsack.
Weight is the weight of the ingredient in decagrams (dag).
Value is the value assigned to including the ingredient
in the knapsack.
In this puzzle, the maximum weight of all ingredients
is 400 decagrams.

This program produces 2779 lines of output
containing 202 increasing maximum values,
and computes 4194304 different combinations to arrive
at the maximum value of 1030 for 12 ingredients.

The example for this program was taken from Rosetta Code at

http://www.rosettacode.org.

---------------------------------------------------------------

Perform a 32 bit cyclic reduncancy check by running crc.  This
program produces a 32 bit hash based on input data read from stdin.

Usage:

cat myfile | crc
echo "text" | crc
putnine | crc

The output is a 32 bit hexadecimal number.

putnine is a simple program that prints the string, "123456789",
to stdout without an end of line character at the end.

This string is used to verify that the right algorithm is being
used.

The combination of putnine and the 32 bit crc program matches
the results in Lammert Bies's online CRC calculator.

https://www.lammertbies.nl/comm/info/crc-calculation.html

putnine | crc   gives CBF43926 

The program, crc.asm, includes a CRC table file, called
crc32tbl.inc.
The shell script to create this table file is called
bldtbl32.sh.
This shell script runs a program, called crctbl32.

---------------------------------------------------------------

Perform a 16 bit CCITT cyclic reduncancy check by running crc16.
This program produces a 16 bit hash of input data read from stdin.

Usage:

cat myfile | crc16
echo "text" | crc16
putnine | crc16

The output is a 16 bit hexadecimal number.

putnine is a simple program that prints the string, "123456789",
to stdout without an end of line character at the end.

This string is used to verify that the right algorithm is being
used.

The combination of putnine and the crc16 program matches the
results in Lammert Bies's online CRC calculator.

https://www.lammertbies.nl/comm/info/crc-calculation.html

putnine | crc16 gives 29B1

The program, crc16.asm, includes a CRC table file, called
crc16tbl.inc.
The shell script to create this table file is called
bldtbl16.sh.
This shell script runs a program, called crctbl16.

---------------------------------------------------------------

Generate a random bit stream by running etausgen.  This program 
creates an endless stream of ASCII zeros and ones.  Press CTL-Z
to stop the program.  The randomizing algorithm used is called
etaus, meaning extended TAUS.  See the etaus repository for more
information on this algorithm.  The initial state for this program
is based on the UNIX date and time in seconds since the epoch.

Usage:

etausgen

---------------------------------------------------------------

Generate a random data stream by running etausraw.  This program 
creates an endless stream of binary data.  Press CTL-Z to stop
the program.  The randomizing algorithm used is called etaus,
meaning extended TAUS.  See the etaus repository for more
information on this algorithm.  The initial state for this program
is based on the UNIX date and time in seconds since the epoch.

This program has been tested successfully with the dieharder
suite of randomness tests.

Usage:

etausraw

etausraw | dieharder -a -g 200

---------------------------------------------------------------

Generate a random data stream by running eeglraw.  This program 
creates an endless stream of binary data.  Press CTL-Z to stop
the program.  The randomizing algorithm used is called eegl,
based on a 32-bit linear feedback shift register.  See the eegl
repository for more information on this algorithm.  The initial
state for this program is based on the UNIX date and time in seconds
since the epoch.

This program has been tested successfully with the dieharder
suite of randomness tests.

Usage:

./etausraw | hexdump -C | less

./etausraw | dieharder -a -g 200

./tstdie.sh

---------------------------------------------------------------

Run lmt to limit a data stream or bit stream to 16 megabytes
of data.  It reads 16 megabytes from stdin and writes them
to stdout.

Usage:

lmt

etausraw | lmt | crc

eeglraw  | lmt | crc

---------------------------------------------------------------

Display your parameter list and your environment variables
by running getprm.

Usage:

getprm x y z
